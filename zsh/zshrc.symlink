#!/bin/zsh

# ZSH Performance (Part 1/2)
# zmodload zsh/zprof

# Exports
export DOTFILES="$HOME/dotfiles"
export PATH=$HOME/bin:$PATH # default custom path for executables

#
# Plugin Setup
#

#
# Antibody Plugin Manager
#

source ~/.zsh_plugins.sh # load plugins
# source <(antibody init)
# update antibody bundles: antibody update && antibody bundle < ~/.zsh_plugins.txt > ~/.zsh_plugins.sh

#
# Aliases
#

# turn off auto-correct for the annoying stuff
alias cp='nocorrect cp '
alias mv='nocorrect mv '
alias mkdir='nocorrect mkdir '
alias b='nocorrect bundle'

# aliases
alias ls="exa --group-directories-first"
alias la="exa -la --group-directories-first"
alias gst='git status'
alias gco='git checkout'
alias gb='git branch'
alias vi=nvim
alias vim=nvim

# zoom zoom (https://gitlab.com/mjwhitta/zoom)
alias zz="z --go"
alias zf="z --find"

#
# History Setup
#

## History wrapper
function omz_history {
  # Delete the history file if `-c' argument provided.
  # This won't affect the `history' command output until the next login.
  zparseopts -E c=clear l=list

  if [[ -n "$clear" ]]; then
    # if -c provided, clobber the history file
    echo -n >| "$HISTFILE"
    echo >&2 History file deleted. Reload the session to see its effects.
  elif [[ -n "$list" ]]; then
    # if -l provided, run as if calling `fc' directly
    builtin fc "$@"
  else
    # otherwise, call `fc -l 1` to show all available
    # history (and pass additional parameters)
    builtin fc "$@" -l 1
  fi
}

# Timestamp format
case $HIST_STAMPS in
  "mm/dd/yyyy") alias history='omz_history -f' ;;
  "dd.mm.yyyy") alias history='omz_history -E' ;;
  "yyyy-mm-dd") alias history='omz_history -i' ;;
  "") alias history='omz_history' ;;
  *) alias history="omz_history -t '$HIST_STAMPS'" ;;
esac

[ -z "$HISTFILE" ] && HISTFILE="$HOME/.zsh_history"
HISTSIZE=50000  # total number of commands in session history
SAVEHIST=500000 # total number of commands in file history

## History command configuration
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt inc_append_history     # add commands to HISTFILE in order of execution
setopt share_history          # share command history data

#
# UX Configuration
#

# Base 16 Setup (Color Scheme)
source ~/base16-shell/scripts/base16-solarized-dark.sh

# Arrow Key History
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search # Up
bindkey "^[[B" down-line-or-beginning-search # Down
bindkey '^R' history-incremental-search-backward

# fuzzy find: start to type
bindkey "$terminfo[kcuu1]" up-line-or-beginning-search
bindkey "$terminfo[kcud1]" down-line-or-beginning-search
bindkey "$terminfo[cuu1]" up-line-or-beginning-search
bindkey "$terminfo[cud1]" down-line-or-beginning-search

# backward and forward word with option+left/right
bindkey '^[^[[D' backward-word
bindkey '^[b' backward-word
bindkey '^[^[[C' forward-word
bindkey '^[f' forward-word

bindkey -s '^P' 'fzf\r\n'
# make FZF use FD for file search
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'

# to to the beggining/end of line with fn+left/right or home/end
typeset -A key

key[Home]=${terminfo[khome]}
key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

bindkey "^[[H" beginning-of-line
bindkey "^[[1~" beginning-of-line
bindkey "^[[F"  end-of-line
bindkey "^[[4~" end-of-line

# ctrl + backspace == delete previous word
bindkey "^[[3;5~" backward-delete-word

#
# Language Setup
#

export EDITOR='nvim'

# Ruby (rbenv)
export RUBY_CONFIGURE_OPTS="--with-readline-dir=/usr/local/opt/readline"
export PATH=$PATH:$HOME/.rbenv/bin
rbenv() { # lazy load version (see https://carlosbecker.com/posts/speeding-up-zsh/)
  eval "$(command rbenv init -)"
  rbenv "$@"
}

# Go
export GOPATH=~/.go
export PATH=$PATH:/usr/local/opt/go/libexec/bin:$GOPATH/bin

# Python
export PYTHONDONTWRITEBYTECODE=1 # disable .pyc files

# Javascript (Node)
export PATH=node_modules/.bin:${PATH} # node.js modules

#
# System Setup
#

# Upgrade Limits
ulimit -n 8192

# Dir Env Support
if [[ -x "$(which direnv 2>/dev/null)" ]]; then
  eval "$(direnv hook zsh)"
fi

# Tag Search Tool
if (( $+commands[tag] )); then
  export TAG_SEARCH_PROG=rg
  export TAG_ALIAS_PREFIX=zz

  tag() { command tag "$@"; source ${TAG_ALIAS_FILE:-/tmp/tag_aliases} 2>/dev/null }
  alias z=tag
fi

#
# MAC OS X SPECIFIC
#

if [ "$(uname -s)" = "Darwin" ]; then
  # coreutils (for mac os x - gnu utils)
  export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"

  # potential hacks for openssl + build my own stuff (using brew)
  # LDFLAGS:  -L/usr/local/opt/openssl/lib
  # CPPFLAGS: -I/usr/local/opt/openssl/include
fi

#
# System SPECIFIC
# 

# export NVM_DIR="$HOME/.nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

# use .localrc for SUPER SECRET CRAP that you don't
# want in your public, versioned repo.
[ -f ~/.localrc ] && . ~/.localrc

# ZSH Performance (Part 2/2)
# zprof
